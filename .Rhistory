dbSendQuery(conn = arxivtable, "
CREATE TABLE arXiv (
X int NOT NULL,
ID text NOT NULL,
Submitter text,
Authors text,
Title text,
Comments text,
JournalRef text,
DOI text,
ReportNo text,
Categories text,
License text,
Abstract text,
Versions text,
UpdateDate text,
AuthorsParsed text,
PRIMARY KEY (X)
);
")
dbWriteTable(conn = arxivtable, name = "arXiv", table, append = TRUE, row.names = FALSE)
dbListTables(arxivtables)
dbListTables(arxivtable)
dbListFields(arxivtable,arXiv)
dbListFields(arxivtable,"arXiv")
query <- "
SELECT Title
FROM arXiv;"
res <- dbSendQuery(arxivtable, query)
dbFetch(res, -1)
dbFetch(res, -1)
dbWriteTable(conn = arxivtable, name = "arXiv", table, append = TRUE, row.names = FALSE)
arxivtable <- dbConnect(SQLite(), dbname = "arXiv Metadata")
dbSendQuery(conn = arxivtable, "
CREATE TABLE arXiv (
X int NOT NULL,
ID text NOT NULL,
Submitter text,
Authors text,
Title text,
Comments text,
JournalRef text,
DOI text,
ReportNo text,
Categories text,
License text,
Abstract text,
Versions text,
UpdateDate text,
AuthorsParsed text,
PRIMARY KEY (X)
);
")
dbWriteTable(conn = arxivtable, name = "arXiv", headers)
dbWriteTable(conn = arxivtable, name = "arXiv", headers, append = TRUE, row.names = FALSE)
query <- "
SELECT Title
FROM arXiv;"
res <- dbSendQuery(arxivtable, query)
dbFetch(res, -1)
query <- "
SELECT Categories, Authors, Title, COUNT(Categories)
FROM arXiv
GROUP BY Categories"
res <- dbSendQuery(arxivtable, query)
dbFetch(res, -1)
query <- "
SELECT Categories, COUNT(Categories)
FROM arXiv
GROUP BY Categories"
res <- dbSendQuery(arxivtable, query)
dbFetch(res, -1)
query <- "
SELECT Submitter, Title, COUNT(Submitter)
FROM arXiv
GROUP BY Submitter"
res <- dbSendQuery(arxivtable, query)
dbFetch(res, -1)
query <- "
SELECT Authors, Title, Categories, Abstract
FROM arXiv
ORDER BY Categories, Authors"
res <- dbSendQuery(arxivtable, query)
dbFetch(res, -1)
query <- "
SELECT Authors, Title, Categories
FROM arXiv
WHERE Authors BETWEEN 'A' and 'M'
ORDER BY Categories, Authors"
res <- dbSendQuery(arxivtable, query)
dbFetch(res, -1)
query <- "
SELECT Authors, Title, Categories
FROM arXiv
WHERE Authors BETWEEN 'A' and 'M'
ORDER BY Categories, Authors"
res <- dbSendQuery(arxivtable, query)
dbFetch(res, -1)
dbClearResult(res)
dbDisconnect(arxivtable)
dbExistsTable(arxivtable,"arXiv")
dbConnect(SQLite(), dbname = "arXivMetadata.sqlite")
if (dbExistsTable(arxivtable, "arXiv"))
)
dbExistsTable(arxivtable, "arXiv")
dbExistsTable(arxivtable, "arXiv")
arxivtable <- dbConnect(SQLite(), dbname = "arXivMetadata.sqlite")
dbExistsTable(arxivtable, "arXiv")
query <- "
SELECT Authors, Title, Categories
FROM arXiv
WHERE Authors BETWEEN 'A' and 'M'
ORDER BY Categories, Authors"
res <- dbSendQuery(arxivtable, query)
arxivtable <- dbConnect(SQLite(), dbname = "arXivMetadata.sqlite")
if (!dbExistsTable(arxivtable, "arXiv")){
dbSendQuery(conn = arxivtable, "
CREATE TABLE arXiv (
X int NOT NULL,
ID text NOT NULL,
Submitter text,
Authors text,
Title text,
Comments text,
JournalRef text,
DOI text,
ReportNo text,
Categories text,
License text,
Abstract text,
Versions text,
UpdateDate text,
AuthorsParsed text,
PRIMARY KEY (X)
);
")
dbWriteTable(conn = arxivtable, name = "arXiv", headers, append = TRUE, row.names = FALSE)
}
query <- "
SELECT Authors, Title, Categories
FROM arXiv
WHERE Authors BETWEEN 'A' and 'M'
ORDER BY Categories, Authors"
res <- dbSendQuery(arxivtable, query)
dbFetch(res, -1)
dbClearResult(res)
dbDisconnect(arxivtable)
query <- "
SELECT Authors, Title, Categories
FROM arXiv
WHERE Authors BETWEEN 'A' and 'M'
ORDER BY Categories, Authors"
res <- dbSendQuery(arxivtable, query)
query <- "
SELECT Authors, Title, Categories
FROM arXiv
WHERE Authors BETWEEN 'A' and 'M'
ORDER BY Categories, Authors"
res <- dbSendQuery(arxivtable, query)
library(RSQLite)
setwd("E:/R Data")
headers <- read.csv(file="./arxiv-dataset.csv")
names(headers) <- c("X", "ID", "Submitter", "Authors", "Title", "Comments", "JournalRef", "DOI", "ReportNo", "Categories", "License", "Abstract", "Versions", "UpdateDate", "AuthorsParsed")
yearsarx <- sapply(headers$id,strsplit,split="[[:punct:]]{1}")
yearsarx = aperm(array(as.character(unlist(yearsarx)),c(2,length(yearsarx)/2)))
datesarx <- as.Date(paste(yearsarx[,1],"01",sep=""), "%y%m%d")
seconddata <- read.csv(file="./Colleges_and_Universities.csv")
query <- "
SELECT Authors, Title, Categories
FROM arXiv
WHERE Authors BETWEEN 'A' and 'M'
ORDER BY Categories, Authors"
res <- dbSendQuery(arxivtable, query)
arxivtable <- dbConnect(SQLite(), dbname = "arXivMetadata.sqlite")
library(RSQLite)
library(dplyr)
library(stringr)
arxivtable <- dbConnect(SQLite(), dbname = "arXivMetadata.sqlite")
dbFetch(dbSendQuery(arxivtable,"SELECT AuthorsParsed FROM arXiv"),-1)
dbFetch(dbSendQuery(arxivtable,"SELECT AuthorsParsed FROM arXiv"),-1)
dbListTables(arxivtable)
dir
setwd("E:/R Data")
arxivtable <- dbConnect(SQLite(), dbname = "arXivMetadata.sqlite")
dbFetch(dbSendQuery(arxivtable,"SELECT AuthorsParsed FROM arXiv"),-1)
headers <- read.csv(file="./arxiv-dataset.csv")
names(headers) <- c("X", "ID", "Submitter", "Authors", "Title", "Comments", "JournalRef", "DOI", "ReportNo", "Categories", "License", "Abstract", "Versions", "UpdateDate", "AuthorsParsed")
parsepythonlist <- function(pylist){
l <- pylist
l1 <- str_match(pattern = "(?<=\\[).*(?=\\])",string=l)
l1 = paste("list(",l1,")", sep="")
l2 <- gsub("\\[", "c(", l1, perl=TRUE)
l3 <- gsub("\\]", ")", l2, perl=TRUE)
pylist <- eval(parse(text = l3))
return(pylist)
}
parsepythonlist(headers$AuthorsParsed[1])
typeof(parsepythonlist(headers$AuthorsParsed[1]))
parsepythonlist(headers$AuthorsParsed[1])[1]
parsepythonlist(headers$AuthorsParsed[1])[2]
parsepythonlist(headers$AuthorsParsed[1])[3]
parsepythonlist(headers$AuthorsParsed[1])[4]
parsepythonlist(headers$AuthorsParsed[2])[4]
parsepythonlist(headers$AuthorsParsed[2])[3]
parsepythonlist(headers$AuthorsParsed[2])[2]
parsepythonlist(headers$AuthorsParsed[2])[1]
as.data.frame(parsepythonlist(headers$AuthorsParsed[2]))
as.data.frame(parsepythonlist(headers$AuthorsParsed[1]))
test1 <- sapply(headers$AuthorsParsed[1:20],function(x) as.data.frame(parsepythonlist(x)))
test1
test1 <- sapply(headers$AuthorsParsed[1:20000],function(x) as.data.frame(parsepythonlist(x)))
View(test1)
test1 <- sapply(headers$AuthorsParsed[1:2000],function(x) as.data.frame(parsepythonlist(x)))
sapply(headers$AuthorsParsed[1:20000],function(x) as.data.frame(parsepythonlist(x)))
sapply(headers$AuthorsParsed[1:20000],function(x) as.data.frame(parsepythonlist(x)))
parsepythonlist <- function(pylist){
l <- pylist
l1 <- str_match(pattern = "(?<=\\[).*(?=\\])",string=l)
l1 = paste("list(",l1,")", sep="")
l2 <- gsub("\\[", "c(", l1, perl=TRUE)
l3 <- gsub("\\]", ")", l2, perl=TRUE)
pylist <- eval(parse(text = l3))
return(as.data.frame(pylist))
}
headers$AuthorsParsed = sapply(headers$AuthorsParsed,parsepythonlist)
parsepythonlist <- function(pylist){
l <- pylist
l1 <- str_match(pattern = "(?<=\\[).*(?=\\])",string=l)
l1 = paste("list(",l1,")", sep="")
l2 <- gsub("\\[", "c(", l1, perl=TRUE)
l3 <- gsub("\\]", ")", l2, perl=TRUE)
pylist <- eval(parse(text = l3))
return(data.frame(matrix(unlist(pylist), nrow=length(pylist), byrow=T)))
}
headers$AuthorsParsed = sapply(headers$AuthorsParsed,parsepythonlist)
headers$AuthorsParsed[1]
headers$AuthorsParsed[2]
headers$AuthorsParsed[1][1]
headers$AuthorsParsed[[1]]
headers$AuthorsParsed[[1]][2]
write.csv(headers$AuthorsParsed, "./authors.csv")
names(headers$AuthorsParsed)
names(headers$AuthorsParsed) <- 1:length(headers$AuthorsParsed)
names(headers$AuthorsParsed)
write.csv(headers$AuthorsParsed, "./authors.csv")
dbSendQuery(arxivtable, "DROP arXiv;")
dbSendQuery(arxivtable, "DROP TABLE arXiv;")
arxivtable <- dbConnect(SQLite(), dbname = "arXivMetadata.sqlite")
if (!dbExistsTable(arxivtable, "arXiv")){
dbSendQuery(conn = arxivtable, "
CREATE TABLE arXiv (
X int NOT NULL,
ID text NOT NULL,
Submitter text,
Authors text,
Title text,
Comments text,
JournalRef text,
DOI text,
ReportNo text,
Categories text,
License text,
Abstract text,
Versions text,
UpdateDate text,
AuthorsParsed text,
PRIMARY KEY (X)
);
")
dbWriteTable(conn = arxivtable, name = "arXiv", headers, append = TRUE, row.names = FALSE)
}
arxivtable <- dbConnect(SQLite(), dbname = "arXivMetadata.sqlite")
if (!dbExistsTable(arxivtable, "arXiv")){
dbSendQuery(conn = arxivtable, "
CREATE TABLE arXiv (
X int NOT NULL,
ID text NOT NULL,
Submitter text,
Authors text,
Title text,
Comments text,
JournalRef text,
DOI text,
ReportNo text,
Categories text,
License text,
Abstract text,
Versions text,
UpdateDate text,
AuthorsParsed text,
PRIMARY KEY (X)
);
")
dbWriteTable(conn = arxivtable, name = "arXiv", headers, append = TRUE, row.names = FALSE)
}
if (!dbExistsTable(arxivtable, "ColUni")){
dbSendQuery(conn = arxivtable, "
CREATE TABLE ColUni (
OBJECTID int NOT NULL,
IPEDSID int NOT NULL,
NAME text NOT NULL,
ADDRESS text,
CITY text,
STATE text,
ZIP int,
TYPE int,
POPULATION int,
COUNTRY text,
LATITUDE text,
LONGITUDE text,
NAICS_CODE int,
NAICS_DESC text,
SOURCE text,
WEBSITE text,
PT_ENROLL int,
FT_ENROLL int,
TOT_ENROLL int,
TOP_EMP int,
PRIMARY KEY (OBJECTID)
);
")
dbWriteTable(conn = arxivtable, name = "ColUni", select(seconddata, OBJECTID,
IPEDSID,
NAME,
ADDRESS,
CITY,
STATE,
ZIP,
TYPE,
POPULATION,
COUNTRY,
LATITUDE,
LONGITUDE,
NAICS_CODE,
NAICS_DESC,
SOURCE,
WEBSITE,
PT_ENROLL,
FT_ENROLL,
TOT_ENROLL,
TOP_EMP), append = TRUE, row.names = FALSE)
}
View(test1[["[['Streinu', 'Ileana', ''], ['Theran', 'Louis', '']]"]])
dbSendQuery(arxivtable, "SELECT AuthorsParsed FROM arXiv")
dbFetch(dbSendQuery(arxivtable, "SELECT AuthorsParsed FROM arXiv"),-1)
dbFetch(dbSendQuery(arxivtable, "SELECT Authors FROM arXiv"),-1)
dbFetch(dbSendQuery(arxivtable, "SELECT * FROM arXiv"),-1)
dbWriteTable(conn = arxivtable, name = "arXiv", headers, append = TRUE, row.names = FALSE)
library(RSQLite)
library(dplyr)
library(stringr)
setwd("E:/R Data")
headers <- read.csv(file="./arxiv-dataset.csv")
names(headers) <- c("X", "ID", "Submitter", "Authors", "Title", "Comments", "JournalRef", "DOI", "ReportNo", "Categories", "License", "Abstract", "Versions", "UpdateDate", "AuthorsParsed")
yearsarx <- sapply(headers$id,strsplit,split="[[:punct:]]{1}")
yearsarx = aperm(array(as.character(unlist(yearsarx)),c(2,length(yearsarx)/2)))
datesarx <- as.Date(paste(yearsarx[,1],"01",sep=""), "%y%m%d")
seconddata <- read.csv(file="./Colleges_and_Universities.csv")
parsepythonlist <- function(pylist){
l <- pylist
l1 <- str_match(pattern = "(?<=\\[).*(?=\\])",string=l)
l1 = paste("list(",l1,")", sep="")
l2 <- gsub("\\[", "c(", l1, perl=TRUE)
l3 <- gsub("\\]", ")", l2, perl=TRUE)
pylist <- eval(parse(text = l3))
return(data.frame(matrix(unlist(pylist), nrow=length(pylist), byrow=T)))
}
#headers$AuthorsParsed = sapply(headers$AuthorsParsed,parsepythonlist)
#dfauthors <- data.frame(matrix(unlist(headers$AuthorsParsed), nrow=length(headers$AuthorsParsed), byrow=T))
arxivtable <- dbConnect(SQLite(), dbname = "arXivMetadata.sqlite")
if (!dbExistsTable(arxivtable, "arXiv")){
dbSendQuery(conn = arxivtable, "
CREATE TABLE arXiv (
X int NOT NULL,
ID text NOT NULL,
Submitter text,
Authors text,
Title text,
Comments text,
JournalRef text,
DOI text,
ReportNo text,
Categories text,
License text,
Abstract text,
Versions text,
UpdateDate text,
AuthorsParsed text,
PRIMARY KEY (X)
);
")
dbWriteTable(conn = arxivtable, name = "arXiv", headers, append = TRUE, row.names = FALSE)
}
if (!dbExistsTable(arxivtable, "ColUni")){
dbSendQuery(conn = arxivtable, "
CREATE TABLE ColUni (
OBJECTID int NOT NULL,
IPEDSID int NOT NULL,
NAME text NOT NULL,
ADDRESS text,
CITY text,
STATE text,
ZIP int,
TYPE int,
POPULATION int,
COUNTRY text,
LATITUDE text,
LONGITUDE text,
NAICS_CODE int,
NAICS_DESC text,
SOURCE text,
WEBSITE text,
PT_ENROLL int,
FT_ENROLL int,
TOT_ENROLL int,
TOP_EMP int,
PRIMARY KEY (OBJECTID)
);
")
dbWriteTable(conn = arxivtable, name = "ColUni", select(seconddata, OBJECTID,
IPEDSID,
NAME,
ADDRESS,
CITY,
STATE,
ZIP,
TYPE,
POPULATION,
COUNTRY,
LATITUDE,
LONGITUDE,
NAICS_CODE,
NAICS_DESC,
SOURCE,
WEBSITE,
PT_ENROLL,
FT_ENROLL,
TOT_ENROLL,
TOP_EMP), append = TRUE, row.names = FALSE)
}
dbSendQuery(arxivtable, "DROP TABLE arXiv;")
arxivtable <- dbConnect(SQLite(), dbname = "arXivMetadata.sqlite")
if (!dbExistsTable(arxivtable, "arXiv")){
dbSendQuery(conn = arxivtable, "
CREATE TABLE arXiv (
X int NOT NULL,
ID text NOT NULL,
Submitter text,
Authors text,
Title text,
Comments text,
JournalRef text,
DOI text,
ReportNo text,
Categories text,
License text,
Abstract text,
Versions text,
UpdateDate text,
AuthorsParsed text,
PRIMARY KEY (X)
);
")
dbWriteTable(conn = arxivtable, name = "arXiv", headers, append = TRUE, row.names = FALSE)
}
if (!dbExistsTable(arxivtable, "ColUni")){
dbSendQuery(conn = arxivtable, "
CREATE TABLE ColUni (
OBJECTID int NOT NULL,
IPEDSID int NOT NULL,
NAME text NOT NULL,
ADDRESS text,
CITY text,
STATE text,
ZIP int,
TYPE int,
POPULATION int,
COUNTRY text,
LATITUDE text,
LONGITUDE text,
NAICS_CODE int,
NAICS_DESC text,
SOURCE text,
WEBSITE text,
PT_ENROLL int,
FT_ENROLL int,
TOT_ENROLL int,
TOP_EMP int,
PRIMARY KEY (OBJECTID)
);
")
dbWriteTable(conn = arxivtable, name = "ColUni", select(seconddata, OBJECTID,
IPEDSID,
NAME,
ADDRESS,
CITY,
STATE,
ZIP,
TYPE,
POPULATION,
COUNTRY,
LATITUDE,
LONGITUDE,
NAICS_CODE,
NAICS_DESC,
SOURCE,
WEBSITE,
PT_ENROLL,
FT_ENROLL,
TOT_ENROLL,
TOP_EMP), append = TRUE, row.names = FALSE)
}
